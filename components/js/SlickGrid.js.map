{"version":3,"sources":["js/SlickGrid.ts"],"names":[],"mappings":"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","file":"SlickGrid.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Component, Input, Output, Inject, forwardRef, OnChanges, OnInit, OnDestroy, ElementRef, SimpleChange, EventEmitter,\n    ViewEncapsulation, Optional, HostListener, AfterViewInit } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs/Rx';\nimport { IObservableCollection, CollectionChange, IGridDataRow, IColumnDefinition, FieldType } from './interfaces';\nimport { GridSyncService } from './gridsync.service';\nimport { ISlickRange, ISlickEvent } from './selectionmodel';\n\ndeclare let Slick;\n\n////////// Interfaces /////////////////////////////////////////////////////////\n\ninterface ISlickGridData {\n    // https://github.com/mleibman/SlickGrid/wiki/DataView\n    getLength(): number;\n    getItem(index: number): any;\n    getRange(start: number, end: number): any; // only available in the forked SlickGrid\n    getItemMetadata(index: number): any;\n}\n\ninterface ISlickGridColumn {\n    // https://github.com/mleibman/SlickGrid/wiki/Column-Options\n    name: string;\n    field: string;\n    id: string;\n    icon: string;\n    resizable: boolean;\n    minWidth?: number;\n    width?: number;\n    asyncPostRender?: (cellRef: string, row: number, dataContext: JSON, colDef: any) => void;\n    formatter?: (row: number, cell: any, value: any, columnDef: any, dataContext: any) => string;\n}\n\n////////// Text Editors ///////////////////////////////////////////////////////\n\nfunction getOverridableTextEditorClass(grid: SlickGrid): any {\n    class OverridableTextEditor {\n        private _textEditor: any;\n        private _rowIndex: number;\n\n        constructor(private _args: any) {\n            this._textEditor = new Slick.Editors.Text(_args);\n        }\n\n        destroy(): void {\n            this._textEditor.destroy();\n        };\n\n        focus(): void {\n            this._textEditor.focus();\n        };\n\n        getValue(): string {\n            return this._textEditor.getValue();\n        };\n\n        setValue(val): void {\n            this._textEditor.setValue(val);\n        };\n\n        loadValue(item, rowNumber): void {\n            if (grid.overrideCellFn) {\n                let overrideValue = grid.overrideCellFn(rowNumber, this._args.column.id, item[this._args.column.id]);\n                if (overrideValue !== undefined) {\n                    item[this._args.column.id] = overrideValue;\n                }\n            }\n\n            this._rowIndex = rowNumber;\n            this._textEditor.loadValue(item);\n        };\n\n        serializeValue(): string {\n            return this._textEditor.serializeValue();\n        };\n\n        applyValue(item, state): void {\n            let currentRow = grid.dataRows.at(this._rowIndex);\n            let colIndex = grid.getColumnIndex(this._args.column.name);\n            let dataLength: number = grid.dataRows.getLength();\n\n            // If this is not the \"new row\" at the very bottom\n            if (this._rowIndex !== dataLength) {\n                currentRow.values[colIndex] = state;\n                this._textEditor.applyValue(item, state);\n            }\n        };\n\n        isValueChanged(): boolean {\n            return this._textEditor.isValueChanged();\n        };\n\n        validate(): any {\n            let result: any =  { valid: true, msg: undefined };\n            let colIndex: number = grid.getColumnIndex(this._args.column.name);\n            let newValue: any = this._textEditor.getValue();\n\n            // TODO: It would be nice if we could support the isCellEditValid as a promise \n            if (grid.isCellEditValid && !grid.isCellEditValid(this._rowIndex, colIndex, newValue)) {\n                result.valid = false;\n            }\n\n            return result;\n        };\n    }\n\n    return OverridableTextEditor;\n}\n\n////////// Implementation /////////////////////////////////////////////////////\n\n@Component({\n    selector: 'slick-grid',\n    template: '<div class=\"grid\" (window:resize)=\"onResize()\"></div>',\n    providers: [GridSyncService],\n    encapsulation: ViewEncapsulation.None\n})\nexport class SlickGrid implements OnChanges, OnInit, OnDestroy, AfterViewInit {\n\n    @Input() columnDefinitions: IColumnDefinition[];\n    @Input() dataRows: IObservableCollection<IGridDataRow>;\n    @Input() resized: Observable<any>;\n    @Input() highlightedCells: {row: number, column: number}[] = [];\n    @Input() blurredColumns: string[] = [];\n    @Input() contextColumns: string[] = [];\n    @Input() columnsLoading: string[] = [];\n    @Input() showHeader: boolean = true;\n    @Input() showDataTypeIcon: boolean = true;\n    @Input() enableColumnReorder: boolean = false;\n    @Input() enableAsyncPostRender: boolean = false;\n    @Input() selectionModel: string | Slick.SelectionModel<any, any> = '';\n    @Input() plugins: Array<string | Slick.Plugin<any>> = [];\n    @Input() enableEditing: boolean = false;\n    @Input() topRowNumber: number;\n\n    @Input() overrideCellFn: (rowNumber, columnId, value?, data?) => string;\n    @Input() isColumnEditable: (column: number) => boolean;\n    @Input() isCellEditValid: (row: number, column: number, newValue: any) => boolean;\n\n    @Output() loadFinished: EventEmitter<void> = new EventEmitter<void>();\n    @Output() editingFinished: EventEmitter<any> = new EventEmitter();\n    @Output() contextMenu: EventEmitter<any> = new EventEmitter<any>();\n    @Output() topRowNumberChange: EventEmitter<number> = new EventEmitter<number>();\n\n    @Output() cellEditBegin: EventEmitter<{row: number, column: number }> = new EventEmitter<{row: number, column: number}>();\n    @Output() cellEditExit: EventEmitter<{row: number, column: number, newValue: any}> = new EventEmitter<{row: number, column: number, newValue: any}>();\n    @Output() rowEditBegin: EventEmitter<{row: number}> = new EventEmitter<{row: number}>();\n    @Output() rowEditExit: EventEmitter<{row: number}> = new EventEmitter<{row: number}>();\n\n    @HostListener('focus')\n    onFocus(): void {\n        if (this._grid) {\n            this._grid.focus();\n        }\n    }\n\n    private _grid: any;\n    private _gridColumns: ISlickGridColumn[];\n    private _columnNameToIndex: any;\n    private _gridData: ISlickGridData;\n    private _rowHeight = 29;\n    private _resizeSubscription: Subscription;\n    private _gridSyncSubscription: Subscription;\n    private _topRow: number = 0;\n    private _leftPx: number = 0;\n    private _activeEditingRow: number;\n    private _activeEditingRowHasChanges: boolean;\n    /* andresse: commented out 11/1/2016 due to minification issues\n    private _finishGridEditingFn: (e: any, args: any) => void;\n    */\n\n    ////////// Constructor and Angular functions //////////////////////////////\n\n    constructor(@Inject(forwardRef(() => ElementRef)) private _el,\n                @Optional() @Inject(forwardRef(() => GridSyncService)) private _gridSyncService) {\n        this._gridData = {\n            getLength: (): number => {\n                return this.dataRows && this._gridColumns ? this.dataRows.getLength() : 0;\n            },\n            getItem: (index): any => {\n                return SlickGrid.getDataWithSchema(this.dataRows.at(index), this._gridColumns);\n            },\n            getRange: (start, end): any => {\n                return !this.dataRows ? undefined : this.dataRows.getRange(start, end).map(d =>  {\n                    return SlickGrid.getDataWithSchema(d, this._gridColumns);\n                });\n            },\n            getItemMetadata: undefined\n        };\n    }\n\n    ngOnChanges(changes: {[propName: string]: SimpleChange}): void {\n        let columnDefinitionChanges = changes['columnDefinitions'];\n        let activeCell = this._grid ? this._grid.getActiveCell() : undefined;\n        let hasGridStructureChanges = false;\n        let wasEditing = this._grid ? !!this._grid.getCellEditor() : false;\n\n        if (columnDefinitionChanges\n            && !_.isEqual(columnDefinitionChanges.previousValue, columnDefinitionChanges.currentValue)) {\n            this.updateSchema();\n            if (!this._grid) {\n                this.initGrid();\n            } else {\n                this._grid.resetActiveCell();\n                this._grid.setColumns(this._gridColumns);\n            }\n            if (this._gridSyncService) {\n                let gridColumnWidths: number[] = this._grid.getColumnWidths();\n                this._gridSyncService.rowNumberColumnWidthPX = gridColumnWidths[0];\n                this._gridSyncService.columnWidthPXs = gridColumnWidths.slice(1);\n            }\n            hasGridStructureChanges = true;\n\n            if (!columnDefinitionChanges.currentValue || columnDefinitionChanges.currentValue.length === 0) {\n                activeCell = undefined;\n            }\n            if (activeCell) {\n                let columnThatContainedActiveCell = columnDefinitionChanges.previousValue[Math.max(activeCell.cell - 1, 0)];\n                let newActiveColumnIndex = columnThatContainedActiveCell\n                    ? columnDefinitionChanges.currentValue.findIndex(c => c.id === columnThatContainedActiveCell.id)\n                    : -1;\n                activeCell.cell = newActiveColumnIndex !== -1 ? newActiveColumnIndex + 1 : 0;\n            }\n        }\n\n        if (changes['dataRows']\n            || (changes['highlightedCells'] && !_.isEqual(changes['highlightedCells'].currentValue, changes['highlightedCells'].previousValue))\n            || (changes['blurredColumns'] && !_.isEqual(changes['blurredColumns'].currentValue, changes['blurredColumns'].previousValue))\n            || (changes['columnsLoading'] && !_.isEqual(changes['columnsLoading'].currentValue, changes['columnsLoading'].previousValue))) {\n            this.setCallbackOnDataRowsChanged();\n            this._grid.updateRowCount();\n            this._grid.setColumns(this._grid.getColumns());\n            this._grid.invalidateAllRows();\n            this._grid.render();\n            if (this._gridSyncService) {\n                this._gridSyncService.rowNumberColumnWidthPX = this._grid.getColumnWidths()[0];\n            }\n            hasGridStructureChanges = true;\n        }\n\n        if (hasGridStructureChanges) {\n            if (activeCell) {\n                this._grid.setActiveCell(activeCell.row, activeCell.cell);\n            } else {\n                this._grid.resetActiveCell();\n            }\n        }\n\n        if (wasEditing && hasGridStructureChanges) {\n            this._grid.editActiveCell();\n        }\n\n        /* andresse: commented out 11/1/2016 due to minification issues\n        if (changes['editableColumnIds']) {\n            let newValue = changes['editableColumnIds'].currentValue;\n            if (!_.isEqual(newValue, changes['editableColumnIds'].previousValue)) {\n                this._grid.onKeyDown.unsubscribe(this.finishGridEditingFn);\n                if (newValue && newValue.length > 0) {\n                    this._grid.onKeyDown.subscribe(this.finishGridEditingFn);\n                    let firstEditableColumn = this._grid.getColumnIndex(newValue[0]) + 1;\n                    let rowToFocus = activeCell ? activeCell.row : this._grid.getViewport().top;\n                    this._grid.gotoCell(rowToFocus, firstEditableColumn, true);\n                }\n            }\n        }\n        */\n    }\n\n    ngOnInit(): void {\n        // ngOnInit() will be called *after* the first time ngOnChanges() is called\n        // so, grid must be there already\n        if (this.topRowNumber === undefined) {\n            this.topRowNumber = 0;\n        }\n        this._grid.scrollRowToTop(this.topRowNumber);\n\n        if (this.resized) {\n            // Re-rendering the grid is expensive. Throttle so we only do so every 100ms.\n            this.resized.throttleTime(100)\n                .subscribe(() => this.onResize());\n        }\n\n        // subscribe to slick events\n        // https://github.com/mleibman/SlickGrid/wiki/Grid-Events\n        this.subscribeToScroll();\n        this.subscribeToCellChanged();\n        this.subscribeToBeforeEditCell();\n        this.subscribeToContextMenu();\n        this.subscribeToActiveCellChanged();\n\n        this._activeEditingRowHasChanges = false;\n    }\n\n    ngAfterViewInit(): void {\n        this.loadFinished.emit();\n    }\n\n    ngOnDestroy(): void {\n        if (this._resizeSubscription !== undefined) {\n            this._resizeSubscription.unsubscribe();\n        }\n        if (this._gridSyncSubscription !== undefined) {\n            this._gridSyncSubscription.unsubscribe();\n        }\n    }\n\n    ////////// Public functions  - Add public API functions here //////////////\n\n    // Enables editing on the grid\n    public enterEditSession(): void {\n        this.changeEditSession(true);\n    }\n\n    // Disables editing on the grid\n    public endEditSession(): void {\n        this.changeEditSession(false);\n    }\n\n    // Called whenever the grid's selected rows change \n    // Event args: { rows: number[] }\n    public get onSelectedRowsChanged(): ISlickEvent {\n        return this._grid.onSelectedRowsChanged;\n    }\n\n    // Returns an array of row indices corresponding to the currently selected rows.\n    public getSelectedRows(): number[] {\n        return this._grid.getSelectedRows();\n    }\n\n    // Gets the column index of the column with the given name\n    public getColumnIndex(name: string): number {\n        return this._columnNameToIndex[name];\n    }\n\n    // Gets a ISlickRange corresponding to the current selection on the grid\n    public getSelectedRanges(): ISlickRange[] {\n        if (this._gridSyncService && this._gridSyncService.selectionModel) {\n            return this._gridSyncService.selectionModel.getSelectedRanges();\n        }\n    }\n\n    // Registers a Slick plugin with the given name\n    public registerPlugin(plugin: Slick.Plugin<any> | string): void {\n        if (typeof plugin === 'object') {\n            this._grid.registerPlugin(plugin);\n        } else if (typeof plugin === 'string' && Slick[plugin] && typeof Slick[plugin] === 'function') {\n            this._grid.registerPlugin(new Slick[plugin]);\n        } else {\n            console.error(`Tried to register plugin ${plugin}, but none was found to be attached to Slick Grid or it was not a function.\n                        Please extend the Slick with the plugin as a function before registering`);\n        }\n    }\n\n    // Set this grid to be the active grid\n    public setActive(): void {\n        this._grid.setActiveCell(0, 1);\n        if (this._gridSyncService && this._gridSyncService.selectionModel) {\n            this._gridSyncService.selectionModel.setSelectedRanges([new Slick.Range(0, 0, 0, 0)]);\n        }\n    }\n\n    // Set the grid's selection\n    public set selection(range: ISlickRange[] | boolean) {\n        if (typeof range === 'boolean') {\n            if (range) {\n                this._gridSyncService.selectionModel.setSelectedRanges(\n                    [new Slick.Range(0, 0, this._grid.getDataLength() - 1, this._grid.getColumns().length - 1)]\n                );\n            } else {\n                this._gridSyncService.selectionModel.clearSelection();\n            }\n        } else {\n            this._gridSyncService.selectionModel.setSelectedRanges(range);\n        }\n    }\n\n    // Add a context menu to SlickGrid\n    public subscribeToContextMenu(): void {\n        const self = this;\n        this._grid.onContextMenu.subscribe(function (event): void {\n            event.preventDefault();\n            self.contextMenu.emit(event);\n        });\n    }\n\n    ////////// Private functions //////////////////////////////////////////////\n\n    private initGrid(): void {\n        // https://github.com/mleibman/SlickGrid/wiki/Grid-Options\n        let options = {\n            enableCellNavigation: true,\n            enableColumnReorder: this.enableColumnReorder,\n            renderRowWithRange: true,\n            showRowNumber: true,\n            showDataTypeIcon: this.showDataTypeIcon,\n            showHeader: this.showHeader,\n            rowHeight: this._rowHeight,\n            defaultColumnWidth: 120,\n            editable: this.enableEditing,\n            autoEdit: this.enableEditing,\n            enableAddRow: false, // TODO change when we support enableAddRow\n            enableAsyncPostRender: this.enableAsyncPostRender,\n            editorFactory: {\n                getEditor: this.getColumnEditor\n            },\n            formatterFactory: {\n                getFormatter: this.getFormatter\n            }\n        };\n\n        this._grid = new Slick.Grid(\n            this._el.nativeElement.getElementsByClassName('grid')[0],\n            this._gridData,\n            this._gridColumns,\n            options);\n\n        if (this._gridSyncService) {\n            if (this.selectionModel) {\n                if (typeof this.selectionModel === 'object') {\n                    this._gridSyncService.underlyingSelectionModel = this.selectionModel;\n                    this._grid.setSelectionModel(this._gridSyncService.selectionModel);\n                } else if (typeof this.selectionModel === 'string' && Slick[this.selectionModel] && typeof Slick[this.selectionModel] === 'function') {\n                    this._gridSyncService.underlyingSelectionModel = new Slick[this.selectionModel]();\n                    this._grid.setSelectionModel(this._gridSyncService.selectionModel);\n                } else {\n                    console.error(`Tried to register selection model ${this.selectionModel}, \n                                   but none was found to be attached to Slick Grid or it was not a function.\n                                   Please extend the Slick with the selection model as a function before registering`);\n                }\n            }\n            this._gridSyncService.scrollBarWidthPX = this._grid.getScrollbarDimensions().width;\n            this._gridSyncSubscription = this._gridSyncService.updated\n                .filter(p => p === 'columnWidthPXs')\n                .debounceTime(10)\n                .subscribe(p => {\n                    this.updateColumnWidths();\n                });\n        }\n\n        for (let plugin of this.plugins) {\n                this.registerPlugin(plugin);\n        }\n\n        this._columnNameToIndex = {};\n        for (let i = 0; i < this._gridColumns.length; i++) {\n            this._columnNameToIndex[this._gridColumns[i].name] = i;\n        }\n\n        this.onResize();\n    }\n\n    private changeEditSession(enabled: boolean): void {\n        this.enableEditing = enabled;\n        let options: any = this._grid.getOptions();\n        options.editable = enabled;\n        options.enableAddRow = false; // TODO change to \" options.enableAddRow = false;\" when we support enableAddRow\n        this._grid.setOptions(options);\n    }\n\n    private handleEditorCellChange(rowNumber: number): void {\n        // Need explicit undefined check due to row 0\n        let firstTimeEditingRow = this._activeEditingRow === undefined;\n        let editingNewRow = rowNumber !== this._activeEditingRow;\n\n        // Check if we have existing edits on a row and we are leaving that row\n        if (!firstTimeEditingRow && editingNewRow && this._activeEditingRowHasChanges) {\n            this._activeEditingRowHasChanges = false;\n            this.rowEditExit.emit({\n                row: this._activeEditingRow\n            });\n            this._activeEditingRow = undefined;\n        }\n\n        // Check if we are entering a new row\n        if (firstTimeEditingRow || editingNewRow) {\n            this._activeEditingRow = rowNumber;\n            this.rowEditBegin.emit({\n                row: rowNumber\n            });\n        }\n    }\n\n    private static getDataWithSchema(data: IGridDataRow, columns: ISlickGridColumn[]): any {\n        let dataWithSchema = {};\n        for (let i = 0; i < columns.length; i++) {\n            dataWithSchema[columns[i].field] = data.values[i];\n        }\n\n        return dataWithSchema;\n    }\n\n    private onResize(): void {\n        if (this._grid !== undefined) {\n            // this will make sure the grid header and body to be re-rendered\n            this._grid.resizeCanvas();\n        }\n    }\n\n    private invalidateRange(start: number, end: number): void {\n        let refreshedRows = _.range(start, end);\n        this._grid.invalidateRows(refreshedRows, true);\n        this._grid.render();\n    }\n\n    /* tslint:disable:member-ordering */\n    private getColumnEditor = (column: any): any => {\n        if (this.isColumnEditable && !this.isColumnEditable(this.getColumnIndex(column.name))) {\n            return undefined;\n        }\n\n        let columnId = column.id;\n        let isColumnLoading = this.columnsLoading && this.columnsLoading.indexOf(columnId) !== -1;\n        let canEditColumn = columnId !== undefined && !isColumnLoading;\n        if (canEditColumn) {\n            return getOverridableTextEditorClass(this);\n        }\n        return undefined;\n    };\n\n    private getFormatter = (column: any): any => {\n        if (column.isRowNumber === true) {\n            return undefined; // use default formatter for row number cell\n        }\n        return (row, cell, value, columnDef, dataContext) => {\n            let columnId = cell > 0 && this.columnDefinitions.length > cell - 1 ? this.columnDefinitions[cell - 1].id : undefined;\n            if (columnId) {\n                let columnType = this.columnDefinitions[cell - 1].type;\n                let isHighlighted = this.highlightedCells && !!this.highlightedCells.find(c => c.row === row && c.column + 1 === cell);\n                let isColumnLoading = this.columnsLoading && this.columnsLoading.indexOf(columnId) !== -1;\n                let isShadowed = this.blurredColumns && !!this.blurredColumns.find(c => c === columnId);\n                let isContext = this.contextColumns && !!this.contextColumns.find(c => c === columnId);\n                let overrideValue = this.overrideCellFn && this.overrideCellFn(row, columnId, value, dataContext);\n\n                let valueToDisplay = (value + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n                let cellClasses = 'grid-cell-value-container';\n                if (columnType !== FieldType.String) {\n                    cellClasses += ' right-justified';\n                }\n\n                /* tslint:disable:no-null-keyword */\n                let valueMissing = value === undefined || value === null;\n                /* tslint:disable:no-null-keyword */\n                let isOverridden = overrideValue !== undefined && overrideValue !== null;\n\n                if (valueMissing && !isOverridden) {\n                    cellClasses += ' missing-value';\n                }\n\n                if (isColumnLoading === true && !isOverridden) {\n                    cellClasses += ' loading-cell';\n                    valueToDisplay = '';\n                }\n\n                if (isOverridden) {\n                    cellClasses += ' override-cell';\n                    valueToDisplay = overrideValue;\n                }\n\n                if (isContext) {\n                    cellClasses += ' context';\n                }\n\n                if (isHighlighted === true) {\n                    cellClasses += ' highlighted';\n                }\n\n                if (isShadowed && !isHighlighted && !isOverridden) {\n                    cellClasses += ' blurred';\n                }\n\n                return '<span title=\"' + valueToDisplay + '\" class=\"' + cellClasses + '\">' + valueToDisplay + '</span>';\n            }\n\n        };\n    };\n\n    private subscribeToScroll(): void {\n        this._grid.onScroll.subscribe((e, args) => {\n            let scrollTop = args.scrollTop;\n            let scrollRow = Math.floor(scrollTop / this._rowHeight);\n            scrollRow = scrollRow < 0 ? 0 : scrollRow;\n            if (scrollRow !== this._topRow) {\n                this._topRow = scrollRow;\n                this.topRowNumberChange.emit(scrollRow);\n            }\n\n            if (this._gridSyncService && args.scrollLeft !== this._leftPx) {\n                this._leftPx = args.scrollLeft;\n                this._gridSyncService.scrollLeftPX = this._leftPx;\n            }\n        });\n    }\n\n    private subscribeToCellChanged(): void {\n        this._grid.onCellChange.subscribe((e, args) => {\n            let modifiedColumn = this.columnDefinitions[args.cell - 1];\n            this._activeEditingRowHasChanges = true;\n            this.cellEditExit.emit({\n                column: this.getColumnIndex(modifiedColumn.name),\n                row: args.row,\n                newValue: args.item[modifiedColumn.id]\n            });\n        });\n    }\n\n    private subscribeToBeforeEditCell(): void {\n        this._grid.onBeforeEditCell.subscribe((e, args) => {\n            this.handleEditorCellChange(args.row);\n            this.cellEditBegin.emit({\n                column: this.getColumnIndex(args.column.name),\n                row: args.row\n            });\n        });\n    }\n\n    private subscribeToActiveCellChanged (): void {\n        // Subscribe to all active cell changes to be able to catch when we tab to the header on the next row\n        this._grid.onActiveCellChanged.subscribe((e, args) => {\n\n            // If editing is disabled or this isn't the header, ignore. \n            // We assume the header is always column 0, as it is hardcoded to be that way in initGrid\n            if (!this.enableEditing || args.cell !== 0) {\n                return;\n            }\n\n            let rowNumber = args.row;\n            let haveRowEdits = this._activeEditingRow !== undefined;\n            let tabbedToNextRow = rowNumber !== this._activeEditingRow; // Need explicit undefined check due to row 0\n\n            // If we tabbed from an edited row to the header of the next row, emit a rowEditExit\n            if (haveRowEdits && tabbedToNextRow && this._activeEditingRowHasChanges) {\n                this.rowEditExit.emit();\n                this._activeEditingRow = undefined;\n                this._activeEditingRowHasChanges = false;\n            }\n        });\n    }\n\n    private updateColumnWidths(): void {\n        for (let i = 0; i < this._gridColumns.length; i++) {\n            this._gridColumns[i].width = this._gridSyncService.columnWidthPXs[i];\n        }\n        this._grid.setColumnWidths(this._gridColumns, true);\n    }\n\n    private updateSchema(): void {\n        if (!this.columnDefinitions) {\n            return;\n        }\n\n        this._gridColumns = this.columnDefinitions.map((c, i) => {\n            let column: ISlickGridColumn = {\n                name: c.name,\n                field: c.id,\n                id: c.id ? c.id : c.name,\n                icon: this.getImagePathForDataType(c.type),\n                resizable: true\n            };\n\n            if (c.asyncPostRender) {\n                column.asyncPostRender = c.asyncPostRender;\n            }\n\n            if (c.formatter) {\n                column.formatter = c.formatter;\n            }\n\n            if (this._gridSyncService) {\n                let columnWidth = this._gridSyncService.columnWidthPXs[i];\n                column.width = columnWidth ? columnWidth : undefined;\n                column.minWidth = this._gridSyncService.columnMinWidthPX;\n            }\n\n            return column;\n        });\n    }\n\n    private getImagePathForDataType(type: FieldType): string {\n        const resourcePath = './resources/';\n        switch (type) {\n            case FieldType.String:\n                return resourcePath + 'col-type-string.svg';\n            case FieldType.Boolean:\n                return resourcePath + 'col-type-boolean.svg';\n            case FieldType.Integer:\n            case FieldType.Decimal:\n                return resourcePath + 'col-type-number.svg';\n            case FieldType.Date:\n                return resourcePath + 'col-type-timedate.svg';\n            case FieldType.Unknown:\n            default:\n                return resourcePath + 'circle.svg';\n        }\n    }\n\n    private setCallbackOnDataRowsChanged(): void {\n        if (this.dataRows) {\n            // We must wait until we get the first set of dataRows before we enable editing or slickgrid will complain\n            if (this.enableEditing) {\n                this.enterEditSession();\n            }\n\n            this.dataRows.setCollectionChangedCallback((change: CollectionChange, startIndex: number, count: number) => {\n                this.renderGridDataRowsRange(startIndex, count);\n            });\n        }\n    }\n\n    private renderGridDataRowsRange(startIndex: number, count: number): void {\n        let editor = this._grid.getCellEditor();\n        let oldValue = editor ? editor.getValue() : undefined;\n        let wasValueChanged = editor ? editor.isValueChanged() : false;\n        this.invalidateRange(startIndex, startIndex + count);\n        let activeCell = this._grid.getActiveCell();\n        if (editor && activeCell.row >= startIndex && activeCell.row < startIndex + count) {\n            if (oldValue && wasValueChanged) {\n                editor.setValue(oldValue);\n            }\n        }\n    }\n\n    /* andresse: commented out 11/1/2016 due to minification issues\n    private get finishGridEditingFn(): (e: any, args: any) => void {\n        if (this._finishGridEditingFn === undefined) {\n            this._finishGridEditingFn = ((e: any, args: any) => {\n                if (e.ctrlKey === true\n                    && e.keyCode === 13\n                    && this.editableColumnIds\n                    && this.editableColumnIds.find(id => id === args.columnDef.id)) {\n                    // pressed [Ctrl + Enter] in the editing area\n                    this.editingFinished.next(undefined);\n                }\n            }).bind(this);\n        }\n\n        return this._finishGridEditingFn;\n    }\n    */\n}\n"]}