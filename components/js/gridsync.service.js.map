{"version":3,"sources":["js/gridsync.service.ts"],"names":[],"mappings":"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","file":"gridsync.service.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs/Rx';\r\nimport { SelectionModel, ISlickRange } from './selectionmodel';\r\n\r\ndeclare let Slick;\r\n\r\n@Injectable()\r\nexport class GridSyncService {\r\n    columnMinWidthPX: number = 30;\r\n\r\n    private _scrollLeftPX: number = 0;\r\n    private _scrollBarWidthPX: number = 0;\r\n    private _columnWidthPXs: number[] = [];\r\n    private _rowNumberColumnWidthPX: number;\r\n    private _updated = new Subject<string>();\r\n    private _typeDropdownOffset = new Subject<[number, number]>();\r\n    private _selectionModel: SelectionModel;\r\n    private _initialColumnWidthPXsOnResize: number[] = [];\r\n    private _isGridReadOnly: boolean = false;\r\n\r\n    initialColumnResize(): void {\r\n        this._initialColumnWidthPXsOnResize = this._columnWidthPXs.slice(0);\r\n    }\r\n\r\n    resizeColumn(index: number, deltaWidthPX: number): void {\r\n        this._columnWidthPXs = this._initialColumnWidthPXsOnResize.slice(0);\r\n        let newWidthPX = this._columnWidthPXs[index] + deltaWidthPX;\r\n        this.setColumnWidthPX(index, newWidthPX);\r\n        this.notifyUpdates('columnWidthPXs');\r\n    }\r\n\r\n    openTypeDropdown(columnIndex: number): void {\r\n        let offset = this._rowNumberColumnWidthPX + this._columnWidthPXs.slice(0, columnIndex).reduce((x, y) => x + y, 0) - this.scrollLeftPX;\r\n        this._typeDropdownOffset.next([columnIndex, offset]);\r\n    }\r\n\r\n    private setColumnWidthPX(index: number, widthPX: number): void {\r\n        if (index < 0 || index >= this._columnWidthPXs.length) {\r\n            return;\r\n        }\r\n\r\n        if (widthPX >= this.columnMinWidthPX) {\r\n            this._columnWidthPXs[index] = widthPX;\r\n        } else {\r\n            this._columnWidthPXs[index] = this.columnMinWidthPX;\r\n\r\n            if (index > 0) {\r\n                let leftShrink = this.columnMinWidthPX - widthPX;\r\n                this.setColumnWidthPX(index - 1, this._columnWidthPXs[index - 1] - leftShrink);\r\n            }\r\n        }\r\n    }\r\n\r\n    set underlyingSelectionModel(selectionModel: any) {\r\n        this._selectionModel = new SelectionModel(\r\n            selectionModel,\r\n            new Slick.EventHandler(),\r\n            new Slick.Event(),\r\n            (fromRow: number, fromCell: number, toRow: number, toCell: number): ISlickRange => new Slick.Range(fromRow, fromCell, toRow, toCell)\r\n        );\r\n    }\r\n\r\n    get updated(): Observable<string> {\r\n        return this._updated;\r\n    }\r\n\r\n    get typeDropdownOffset(): Observable<[number, number]> {\r\n        return this._typeDropdownOffset;\r\n    }\r\n\r\n    set scrollLeftPX(value: number) {\r\n        this._scrollLeftPX = value;\r\n        this.notifyUpdates('scrollLeftPX');\r\n    }\r\n\r\n    get scrollLeftPX(): number {\r\n        return this._scrollLeftPX;\r\n    }\r\n\r\n    set scrollBarWidthPX(value: number) {\r\n        this._scrollBarWidthPX = value;\r\n        this.notifyUpdates('scrollBarWidthPX');\r\n    }\r\n\r\n    get scrollBarWidthPX(): number {\r\n        return this._scrollBarWidthPX;\r\n    }\r\n\r\n    set columnWidthPXs(value: number[]) {\r\n        this._columnWidthPXs = value;\r\n        this.notifyUpdates('columnWidthPXs');\r\n    }\r\n\r\n    get columnWidthPXs(): number[] {\r\n        return this._columnWidthPXs;\r\n    }\r\n\r\n    set rowNumberColumnWidthPX(value: number) {\r\n        this._rowNumberColumnWidthPX = value;\r\n        this.notifyUpdates('rowNumberColumnWidthPX');\r\n    }\r\n\r\n    get rowNumberColumnWidthPX(): number {\r\n        return this._rowNumberColumnWidthPX;\r\n    }\r\n\r\n    get selectionModel(): SelectionModel {\r\n        return this._selectionModel;\r\n    }\r\n\r\n    set isGridReadOnly(value: boolean) {\r\n        this._isGridReadOnly = value;\r\n        this.notifyUpdates('isGridReadOnly');\r\n    }\r\n\r\n    get isGridReadOnly(): boolean {\r\n        return this._isGridReadOnly;\r\n    }\r\n\r\n    private notifyUpdates(propertyName: string): void {\r\n        this._updated.next(propertyName);\r\n    }\r\n}\r\n"]}