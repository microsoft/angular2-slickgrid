{"version":3,"sources":["js/SelectionModel.ts"],"names":[],"mappings":"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","file":"SelectionModel.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { ISelectionRange } from './interfaces';\r\n\r\nexport class SelectionModel implements ISlickSelectionModel {\r\n\r\n    constructor(private _rowSelectionModel: ISlickSelectionModel,\r\n                private _handler: ISlickEventHandler,\r\n                private _onSelectedRangesChanged: ISlickEvent,\r\n                private _slickRangeFactory: (fromRow: number, fromCell: number, toRow: number, toCell: number) => ISlickRange) { }\r\n\r\n    get range(): ISlickRange[] {\r\n        return this._ranges;\r\n    }\r\n\r\n    get onSelectedRangesChanged(): ISlickEvent {\r\n        return this._onSelectedRangesChanged;\r\n    }\r\n\r\n    init(grid: ISlickGrid): void {\r\n        this._grid = grid;\r\n        this._rowSelectionModel.init(grid);\r\n        this._handler.subscribe(this._rowSelectionModel.onSelectedRangesChanged, (e, ranges) => {\r\n            this.updateSelectedRanges(ranges);\r\n        });\r\n    }\r\n\r\n    destroy(): void {\r\n        this._handler.unsubscribeAll();\r\n        this._rowSelectionModel.destroy();\r\n    }\r\n\r\n    setSelectedRanges(ranges: ISlickRange[]): void {\r\n        this._rowSelectionModel.setSelectedRanges(ranges);\r\n    }\r\n\r\n    getSelectedRanges(): ISlickRange[] {\r\n        return this._rowSelectionModel.getSelectedRanges();\r\n    }\r\n\r\n    changeSelectedRanges(selections: ISelectionRange[]): void {\r\n        let slickRange = (selections || []).map(s =>\r\n            this._slickRangeFactory(s.startRow, s.startColumn, s.endRow - 1, s.endColumn - 1)\r\n        );\r\n        this.updateSelectedRanges(slickRange);\r\n    }\r\n\r\n    toggleSingleColumnSelection(columnId: string): void {\r\n        let newRanges = [this.getColumnRange(columnId)];\r\n        if (SelectionModel.areRangesIdentical(newRanges, this._ranges)) {\r\n            this.clearSelection();\r\n        } else {\r\n            this.setSingleColumnSelection(columnId);\r\n        }\r\n    }\r\n\r\n    setSingleColumnSelection(columnId: string): void {\r\n        this._lastSelectedColumnIndexSequence = [this._grid.getColumnIndex(columnId)];\r\n        this._grid.resetActiveCell();\r\n        this.updateSelectedRanges([this.getColumnRange(columnId)]);\r\n    }\r\n\r\n    toggleMultiColumnSelection(columnId: string): void {\r\n        if (this.isColumnSelectionCurrently === false) {\r\n            return this.toggleSingleColumnSelection(columnId);\r\n        }\r\n        let columnIndex = this._grid.getColumnIndex(columnId);\r\n        let columnRange = this.getColumnRangeByIndex(columnIndex);\r\n        let columnInRange = false;\r\n        let newRanges = this._ranges.filter((value, index) => {\r\n            if (value.fromCell === columnRange.fromCell && value.toCell === columnRange.toCell) {\r\n                columnInRange = true;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        this._lastSelectedColumnIndexSequence = this._lastSelectedColumnIndexSequence.filter(value => value !== columnIndex);\r\n\r\n        if (columnInRange === false) {\r\n            newRanges.push(columnRange);\r\n            this._lastSelectedColumnIndexSequence.push(this._grid.getColumnIndex(columnId));\r\n        }\r\n\r\n        this._grid.resetActiveCell();\r\n        this.updateSelectedRanges(newRanges);\r\n    }\r\n\r\n    extendMultiColumnSelection(columnId: string): void {\r\n        if (this.isColumnSelectionCurrently === false\r\n            || !this._lastSelectedColumnIndexSequence\r\n            || this._lastSelectedColumnIndexSequence.length === 0) {\r\n            return this.toggleSingleColumnSelection(columnId);\r\n        }\r\n\r\n        let columnIndex = this._grid.getColumnIndex(columnId);\r\n        let lastSelectedColumnIndex = this._lastSelectedColumnIndexSequence[this._lastSelectedColumnIndexSequence.length - 1];\r\n\r\n        let start = Math.min(columnIndex, lastSelectedColumnIndex);\r\n        let end = Math.max(columnIndex, lastSelectedColumnIndex);\r\n\r\n        let newRanges = [];\r\n        this._lastSelectedColumnIndexSequence = [];\r\n        for (let i = start; i <= end; i++) {\r\n            newRanges.push(this.getColumnRangeByIndex(i));\r\n            if (i !== lastSelectedColumnIndex) {\r\n                this._lastSelectedColumnIndexSequence.push(i);\r\n            }\r\n        }\r\n        this._lastSelectedColumnIndexSequence.push(lastSelectedColumnIndex);\r\n\r\n        this._grid.resetActiveCell();\r\n        this.updateSelectedRanges(newRanges);\r\n    }\r\n\r\n    clearSelection(): void {\r\n        this._lastSelectedColumnIndexSequence = [];\r\n        this._grid.resetActiveCell();\r\n        this._rowSelectionModel.setSelectedRanges([]);\r\n    }\r\n\r\n    private _grid: ISlickGrid;\r\n    private _ranges: ISlickRange[] = [];\r\n    private _lastSelectedColumnIndexSequence: number[] = [];\r\n\r\n    private static areRangesIdentical(lhs: ISlickRange[], rhs: ISlickRange[]): boolean {\r\n        if (lhs && rhs && (lhs !== rhs) && lhs.length === rhs.length) {\r\n            for (let i = 0; i < lhs.length; ++i) {\r\n                if (lhs[i].fromRow !== rhs[i].fromRow\r\n                    || lhs[i].toRow !== rhs[i].toRow\r\n                    || lhs[i].fromCell !== rhs[i].fromCell\r\n                    || lhs[i].toCell !== rhs[i].toCell) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getColumnRange(columnId: string): ISlickRange {\r\n        let columnIndex = this._grid.getColumnIndex(columnId);\r\n        return this.getColumnRangeByIndex(columnIndex);\r\n    }\r\n\r\n    private getColumnRangeByIndex(columnIndex: number): ISlickRange {\r\n        let rowCount = this._grid.getDataLength();\r\n        let lastRowToSelect =  rowCount === 0 ? 0 : rowCount - 1 ;\r\n        return this._slickRangeFactory(0, columnIndex, lastRowToSelect, columnIndex);\r\n    }\r\n\r\n    private get isColumnSelectionCurrently(): boolean {\r\n        return this._ranges\r\n            && this._ranges.length > 0\r\n            && this._ranges.find(r => {\r\n                let startAtFirstRow = r.fromRow === 0;\r\n                let endAtLastRow = r.toRow === Math.max(0, this._grid.getDataLength() - 1);\r\n                return !startAtFirstRow || !endAtLastRow || r.fromCell !== r.toCell;\r\n            }) === undefined;\r\n    }\r\n\r\n    private updateSelectedRanges(ranges: ISlickRange[]): void {\r\n        // Set focus to this grid if it's not already somewhere inside it.\r\n        if (ranges && ranges.length !== 0 && this._grid && this._grid.getCanvasNode() && !this._grid.getCanvasNode().contains(document.activeElement)) {\r\n            this._grid.focus();\r\n        }\r\n\r\n        if (SelectionModel.areRangesIdentical(ranges, this._ranges)) {\r\n            return;\r\n        }\r\n\r\n        this._ranges = ranges;\r\n        this.onSelectedRangesChanged.notify(this._ranges);\r\n    }\r\n}\r\n\r\nexport interface ISlickSelectionModel {\r\n    range: ISlickRange[];\r\n    onSelectedRangesChanged: any;\r\n    init(grid: any): void;\r\n    destroy(): void;\r\n    setSelectedRanges(ranges: ISlickRange[]): void;\r\n    getSelectedRanges(): ISlickRange[];\r\n}\r\n\r\nexport interface ISlickEventHandler {\r\n    subscribe(event: any, handler: any): void;\r\n    unsubscribeAll(): void;\r\n}\r\n\r\nexport interface ISlickEvent {\r\n    notify(eventData: ISlickRange[]): void;\r\n    subscribe(handler: (e: any, args: any) => void): void;\r\n}\r\n\r\nexport interface ISlickRange {\r\n    fromCell: number;\r\n    fromRow: number;\r\n    toCell: number;\r\n    toRow: number;\r\n}\r\n\r\nexport interface ISlickGrid {\r\n    getActiveCellNode(): any;\r\n    getCanvasNode(): any;\r\n    resetActiveCell(): void;\r\n    focus(): void;\r\n    getColumnIndex(columnId: string): number;\r\n    getDataLength(): number;\r\n}\r\n"]}